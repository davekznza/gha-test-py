name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * SUN'

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.13']

    steps:
    - name: Checkout code          
      uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: ${{ runner.os }}-pip-        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pylint
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8 
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . -v --color=always --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . -v --color=always --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics         
    - name: Lint with pylint
      run: |
        pylint $(git ls-files '*.py')      
    - name: Run tests with pytest
      run: |
        pytest -v --color=yes --code-highlight=yes      

  deploy:
    runs-on: ubuntu-latest
    needs: [build] # Only deploy if build job passes
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Only deploy on push to main .. and skip if locally run by act

    steps:
    - name: Calculate build start time
      id: build_start_time
      run: echo "BUILD_START_TIME=$(date +%s)" >> $GITHUB_ENV      

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy PythonAnywhere Web App
      uses: umuttopalak/pythonanywhere-deploy-action@v1.1.2
      with:
        host: 'www.pythonanywhere.com'
        username: ${{ secrets.PA_USERNAME }}
        api_token: ${{ secrets.PA_API_TOKEN }}
        domain_name: ${{ secrets.PA_DOMAIN_NAME }}

    - name: Calculate build duration
      id: calculate_duration
      run: |
        end_time=$(date +%s)
        duration=$((end_time - $BUILD_START_TIME))
        echo "duration=$duration" >> $GITHUB_ENV
        echo "duration=$duration" >> $GITHUB_OUTPUT        

    - name: Get short commit hash
      id: short_commit
      run: echo "SHORT_SHA=${GITHUB_SHA:0:7}" >> $GITHUB_ENV      

    - name: Send deployment notification to slack
      if: always() && ${{ !env.ACT }} # run even if previous steps fail .. and skip if run by act locally
      uses: slackapi/slack-github-action@v2.1.0
      with:
        webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
        webhook-type: incoming-webhook
        payload: |
          {
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*:rocket: Deployment Triggered* .. ${{ job.status }}!"
                }
              },
              {
                "type": "section",
                "fields": [                   
                  {
                    "type": "mrkdwn",
                    "text": "*Site URL*\n<https://davekznza.pythonanywhere.com>"
                  },                  
                  {
                    "type": "mrkdwn",
                    "text": "*Repo*\n<https://github.com/${{ github.repository }}|${{ github.repository }}>"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Build Logs & Time*\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Logs> (took `${{ steps.calculate_duration.outputs.duration }}` sec)"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Event / Workflow / Job / Status*\n`${{ github.event_name }}` / `${{ github.workflow }}` / `${{ github.job }}` / `${{ job.status }}`"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Author & Commit*\n${{ github.event.head_commit.author.name }} (<${{ github.event.head_commit.url }}|${{ env.SHORT_SHA }}>)"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Message*\n${{ github.event.head_commit.message }}"
                  }                    
                ]
              }
            ]
          }
          